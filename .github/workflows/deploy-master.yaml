name: Deploy master branch

on:
  workflow_dispatch: {}
  push:
    branches: [master]
    paths:
      - "Codigo/**"

jobs:
  backend-cd:
    name: Continuous delivery | Docker-compose
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [16.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node-version }}

      - name: Branch name variable
        run: |
          echo "BRANCH_NAME=master" >> $GITHUB_ENV

      - name: Set BRANCH_DIR variable
        run: |
          echo "BRANCH_DIR=/${{ secrets.SSH_USER }}/app/gitgrade/branch-${{ env.BRANCH_NAME }}" >> $GITHUB_ENV

      - name: Set CODE_DIR variable
        run: |
          echo "CODE_DIR=${{ env.BRANCH_DIR }}/Codigo" >> $GITHUB_ENV

      - name: Set BRANCH_FILTER variable
        run: |
          echo "BRANCH_FILTER=gitgrade_${{ env.BRANCH_NAME }}" >> $GITHUB_ENV

      - name: Stop and remove containers, images, volumes and project files from VPS based on master branch
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            BRANCH_FILTER=${{ env.BRANCH_FILTER }}

            # Stop and remove containers
            CONTAINERS=$(sudo docker ps -a -q --filter="name=$BRANCH_FILTER")
            if [ "$CONTAINERS" != "" ]; then
                sudo docker stop $CONTAINERS
                sudo docker rm -vf $CONTAINERS
            fi

            # Remove images
            IMAGES=$(sudo docker images -q -f "dangling=true" $BRANCH_FILTER)
            if [ "$IMAGES" != "" ]; then
                sudo docker rmi -f $IMAGES
            fi

            # Remove volumes
            VOLUMES=$(sudo docker volume ls -q --filter="name=$BRANCH_FILTER")
            if [ "$VOLUMES" != "" ]; then
                sudo docker volume rm $VOLUMES
            fi

            # Remove networks
            NETWORKS=$(sudo docker network ls -q --filter="name=$BRANCH_FILTER")
            if [ "$NETWORKS" != "" ]; then
                sudo docker network rm $NETWORKS
            fi

            # Clean Dangling networks
            DANGLING_NETWORKS=$(sudo docker network ls -q -f "dangling=true" --filter="name=$BRANCH_FILTER")
            if [ "$DANGLING_NETWORKS" != "" ]; then
                sudo docker network rm $DANGLING_NETWORKS
            fi

            sudo rm -rf /${{ secrets.SSH_USER }}/app/gitgrade/branch-${{ env.BRANCH_NAME }}

      - name: Mkdir CODE_DIR
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            CODE_DIR=${{ env.CODE_DIR }}
            mkdir -p "$CODE_DIR"

      - name: Generate docker-compose .env
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            CODE_DIR=${{ env.CODE_DIR }}

            OAUTH_FAILURE_SEARCH_PARAM="message"

            cd "$CODE_DIR"

            rm -f .env
            touch .env

            echo "# Common docker services envs" >> "$CODE_DIR/.env"
            echo "HOST=${{ secrets.HOST }}" >> "$CODE_DIR/.env"
            echo "NODE_ENV=development" >> "$CODE_DIR/.env"
            echo "APP_DEBUG=${{ secrets.APP_DEBUG }}" >> "$CODE_DIR/.env"
            echo "APP_TIMEZONE=${{ secrets.APP_TIMEZONE }}" >> "$CODE_DIR/.env"
            echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> "$CODE_DIR/.env"
            echo "DB_CHARSET=${{ secrets.DB_CHARSET }}" >> "$CODE_DIR/.env"
            echo "DB_COLLATE=${{ secrets.DB_COLLATE }}" >> "$CODE_DIR/.env"
            echo "DB_TIMEZONE=${{ secrets.DB_TIMEZONE }}" >> "$CODE_DIR/.env"
            echo "GITHUB_ORGANIZATION_NAME=${{ secrets.GH_ORGANIZATION_NAME }}" >> "$CODE_DIR/.env"
            echo "GITHUB_PERSONAL_ACCESS_TOKEN=${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" >> "$CODE_DIR/.env"

            echo "# MySQL docker service envs" >> "$CODE_DIR/.env"
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> "$CODE_DIR/.env"
            echo "DB_USER=${{ secrets.DB_USER }}" >> "$CODE_DIR/.env"
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> "$CODE_DIR/.env"
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> "$CODE_DIR/.env"
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> "$CODE_DIR/.env"
            echo "DB_DOCKER_PORT=3306" >> "$CODE_DIR/.env"

            echo "# Jobscheduler docker service envs" >> "$CODE_DIR/.env"
            echo "JOBSCHEDULER_SERVICE_NODE_PORT=${{ secrets.JOBSCHEDULER_SERVICE_NODE_PORT }}" >> "$CODE_DIR/.env"
            echo "SYNC_TIME=${{ secrets.SYNC_TIME }}" >> "$CODE_DIR/.env"
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> "$CODE_DIR/.env"
            echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> "$CODE_DIR/.env"

            echo "# SupportPlataform service docker service envs" >> "$CODE_DIR/.env"
            echo "SUPPORTPLATFORM_SERVICE_NODE_PORT=${{ secrets.SUPPORTPLATFORM_SERVICE_NODE_PORT }}" >> "$CODE_DIR/.env"
            echo "GITHUB_APP_CLIENT_ID=${{ secrets.GH_APP_CLIENT_ID }}" >> "$CODE_DIR/.env"
            echo "GITHUB_APP_CLIENT_SECRET=${{ secrets.GH_APP_CLIENT_SECRET }}" >> "$CODE_DIR/.env"
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> "$CODE_DIR/.env"
            echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> "$CODE_DIR/.env"
            echo "OAUTH_FAILURE_SEARCH_PARAM=$OAUTH_FAILURE_SEARCH_PARAM" >> "$CODE_DIR/.env"
            echo "OAUTH_SUCCESS_REDIRECT_URL=http://${{ secrets.HOST }}:${{ secrets.SUPPORTPLATAFORM_WEB_NODE_PORT }}/login" >> "$CODE_DIR/.env"

            echo "# SupportPlataform web docker service envs" >> "$CODE_DIR/.env"
            echo "SUPPORTPLATAFORM_WEB_NODE_PORT=${{ secrets.SUPPORTPLATAFORM_WEB_NODE_PORT }}" >> "$CODE_DIR/.env"
            echo "VITE_API_URL=http://${{ secrets.HOST }}:${{ secrets.SUPPORTPLATFORM_SERVICE_NODE_PORT }}" >> "$CODE_DIR/.env"
            echo "SUPPORTPLATFORM_WEB_HOST=0.0.0.0" >> "$CODE_DIR/.env"
            echo "VITE_OAUTH_FAILURE_SEARCH_PARAM=$OAUTH_FAILURE_SEARCH_PARAM" >> "$CODE_DIR/.env"

      - name: Copy project files to VPS based on Pull Request branch if OPENED, UPDATED or REOPENED
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "./Codigo/"
          target: "${{ env.BRANCH_DIR }}"

      - name: Deploy to VM on Pull Request if OPENED, UPDATED or REOPENED
        if: github.event.action != 'closed'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd ${{ env.CODE_DIR }}
            BRANCH_FILTER=${{ env.BRANCH_FILTER }}
            sudo docker-compose -p $BRANCH_FILTER up -d --build
