name: Deploy Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    paths:
      - "Codigo/**"

jobs:
  setup:
    name: Setup Environment Variables
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Sanitize branch name
      - name: Sanitize branch name
        run: echo "SANITIZED_BRANCH_NAME=$(echo "${{ github.head_ref }}" | tr '[:upper:]' '[:lower:]' | sed 's/\//-/g' | sed 's/[^a-z0-9_-]//g')" >> $GITHUB_ENV

      # Set various directories and filters based on sanitized branch name
      - name: Set BRANCH_DIR, CODE_DIR, and BRANCH_FILTER variables
        run: |
          echo "BRANCH_DIR=/${{ secrets.SSH_USER }}/app/temp/gitgrade/branch-$SANITIZED_BRANCH_NAME" >> $GITHUB_ENV
          echo "CODE_DIR=$BRANCH_DIR/Codigo" >> $GITHUB_ENV
          echo "BRANCH_FILTER=gitgrade_$SANITIZED_BRANCH_NAME" >> $GITHUB_ENV

  cleanup:
    name: Cleanup VM Resources based on PR Status
    needs: setup
    runs-on: ubuntu-latest
    steps:
      # Cleanup containers, images, volumes, networks, and project files
      - name: Cleanup VM Resources
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            # Stop and remove containers
            CONTAINERS=$(sudo docker ps -a -q --filter="name=$BRANCH_FILTER")
            if [ "$CONTAINERS" != "" ]; then
                sudo docker stop $CONTAINERS
                sudo docker rm -vf $CONTAINERS
            fi

            # Remove images
            IMAGES=$(sudo docker images -q -f "dangling=true" $BRANCH_FILTER)
            if [ "$IMAGES" != "" ]; then
                sudo docker rmi -f $IMAGES
            fi

            # Remove volumes
            VOLUMES=$(sudo docker volume ls -q --filter="name=$BRANCH_FILTER")
            if [ "$VOLUMES" != "" ]; then
                sudo docker volume rm $VOLUMES
            fi

            # Remove networks
            NETWORKS=$(sudo docker network ls -q --filter="name=$BRANCH_FILTER")
            if [ "$NETWORKS" != "" ]; then
                sudo docker network rm $NETWORKS
            fi

            # Clean Dangling networks
            DANGLING_NETWORKS=$(sudo docker network ls -q -f "dangling=true" $BRANCH_FILTER)
            if [ "$DANGLING_NETWORKS" != "" ]; then
                sudo docker network rm $DANGLING_NETWORKS
            fi

            sudo rm -rf $BRANCH_DIR

  deploy:
    name: Deploy based on PR Status
    needs: setup
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      # Generate ports
      - name: Generate DB_PORT and Set in env
        if: github.event.action != 'closed'
        run: |
          DB_PORT=$(sshpass -p ${{ secrets.SSH_PASSWORD }} ssh -o "StrictHostKeyChecking=no" -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            DB_PORT=$((RANDOM % 1000 + 4001))
            while sudo lsof -Pi :$DB_PORT -sTCP:LISTEN -t >/dev/null; do
                DB_PORT=$((RANDOM % 1000 + 4001))
            done
            echo $DB_PORT
          ')
          echo "DB_PORT=$DB_PORT" >> $GITHUB_ENV

      - name: Generate JOBSCHEDULER_NODE_PORT and Set in env
        if: github.event.action != 'closed'
        run: |
          JOBSCHEDULER_NODE_PORT=$(sshpass -p ${{ secrets.SSH_PASSWORD }} ssh -o "StrictHostKeyChecking=no" -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            JOBSCHEDULER_NODE_PORT=$((RANDOM % 1000 + 5001))
            while sudo lsof -Pi :$JOBSCHEDULER_NODE_PORT -sTCP:LISTEN -t >/dev/null; do
                JOBSCHEDULER_NODE_PORT=$((RANDOM % 1000 + 5001))
            done
            echo $JOBSCHEDULER_NODE_PORT
          ')
          echo "JOBSCHEDULER_NODE_PORT=$JOBSCHEDULER_NODE_PORT" >> $GITHUB_ENV

      # Create Code Directory on VM
      - name: Mkdir CODE_DIR on VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: mkdir -p "$CODE_DIR"

      # Generate docker-compose .env
      - name: Generate docker-compose .env on VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            DB_PORT=${{ env.DB_PORT }}
            JOBSCHEDULER_NODE_PORT=${{ env.JOBSCHEDULER_NODE_PORT }}

            CODE_DIR=${{ env.CODE_DIR }}

            cd "$CODE_DIR"

            rm -f .env
            touch .env

            echo "# MySQL docker service envs" >> "$CODE_DIR/.env"
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> "$CODE_DIR/.env"
            echo "DB_USER=${{ secrets.DB_USER }}" >> "$CODE_DIR/.env"
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> "$CODE_DIR/.env"
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> "$CODE_DIR/.env"
            echo "DB_PORT=$DB_PORT" >> "$CODE_DIR/.env"
            echo "DB_DOCKER_PORT=3306" >> "$CODE_DIR/.env"

            echo "# Jobscheduler docker service envs" >> "$CODE_DIR/.env"
            echo "JOBSCHEDULER_NODE_PORT=$JOBSCHEDULER_NODE_PORT" >> "$CODE_DIR/.env"
            echo "NODE_ENV=development" >> "$CODE_DIR/.env"
            echo "APP_TIMEZONE=${{ secrets.APP_TIMEZONE }}" >> "$CODE_DIR/.env"
            echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> "$CODE_DIR/.env"
            echo "DB_CHARSET=${{ secrets.DB_CHARSET }}" >> "$CODE_DIR/.env"
            echo "DB_COLLATE=${{ secrets.DB_COLLATE }}" >> "$CODE_DIR/.env"
            echo "DB_TIMEZONE=${{ secrets.DB_TIMEZONE }}" >> "$CODE_DIR/.env"
            echo "SYNC_TIME=${{ secrets.SYNC_TIME }}" >> "$CODE_DIR/.env"
            echo "APP_DEBUG=${{ secrets.APP_DEBUG }}" >> "$CODE_DIR/.env"
            echo "GITHUB_PERSONAL_ACCESS_TOKEN=${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" >> "$CODE_DIR/.env"
            echo "GITHUB_ORGANIZATION_NAME=${{ secrets.GH_ORGANIZATION_NAME }}" >> "$CODE_DIR/.env"
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> "$CODE_DIR/.env"
            echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}" >> "$CODE_DIR/.env"

      # Copy project files to VM
      - name: Copy project files to VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "./Codigo/"
          target: "$BRANCH_DIR"

      # Comment on the PR with port details
      - name: Comment PR with port details
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            Services were started with the following port details:
            - **DB_PORT**: ${{ env.DB_PORT }}
            - **JOBSCHEDULER_NODE_PORT**: ${{ env.JOBSCHEDULER_NODE_PORT }}

      # Deploy to VM
      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd $CODE_DIR
            sudo docker-compose -p $BRANCH_FILTER up -d --build
